summary(second_opinion_model)
# Interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
data <- read.csv("~/DACSS/Datasets/fa24_g5.csv")
# Convert outcome variables to binary (1 for Yes, 0 for No)
data$g5q1 <- ifelse(data$g5q1 == "Yes", 1, 0)
data$g5q2 <- ifelse(data$g5q2 == "Yes", 1, 0)
# Ensure political_party is treated as an ordinal factor
data$political_party <- factor(data$political_party, levels = 1:7,
labels = c("Strong Republican", "Republican", "Lean Republican",
"Independent", "Lean Democrat", "Democrat", "Strong Democrat"))
# Summarize data: trust rates and second opinion rates by political party and leanings
summary_table <- data %>%
group_by(political_party, g5sd2_1) %>%
summarise(
trust_rate = mean(g5q1, na.rm = TRUE),
second_opinion_rate = mean(g5q2, na.rm = TRUE),
count = n()
)
print(summary_table)
# Logistic regression to assess predictors
trust_model <- glm(g5q1 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(trust_model)
second_opinion_model <- glm(g5q2 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(second_opinion_model)
# Interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Scatterplot
ggplot(data, aes(x = political_party, y = as.numeric(g5q1), color = g5sd2_1)) +
geom_jitter(width = 0.2, height = 0.1, alpha = 0.7) +
labs(title = "Scatter Plot of Trust by Political Party and Leanings",
x = "Political Party", y = "Trust (1 = Yes, 0 = No)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Boxplot
ggplot(data, aes(x = g5sd2_1, y = as.numeric(g5q1), fill = g5sd2_1)) +
geom_boxplot() +
labs(title = "Distribution of Trust (g5q1) by Political Leanings",
x = "Political Leanings", y = "Trust (1 = Yes, 0 = No)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#stacked bar plot
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_area(stat = "bin", position = "fill") +
labs(title = "Proportion of Trust in Advice by Political Party",
y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert predictors to factors if they aren't already
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
# Fit the factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
# Summary of the ANOVA
summary(anova_model)
# Interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
data <- read.csv("~/DACSS/Datasets/fa24_g5.csv")
# Convert outcome variables to binary (1 for Yes, 0 for No)
data$g5q1 <- ifelse(data$g5q1 == "Yes", 1, 0)
data$g5q2 <- ifelse(data$g5q2 == "Yes", 1, 0)
# Ensure political_party is treated as an ordinal factor
data$political_party <- factor(data$political_party, levels = 1:7,
labels = c("Strong Republican", "Republican", "Lean Republican",
"Independent", "Lean Democrat", "Democrat", "Strong Democrat"))
# Summarize data: trust rates and second opinion rates by political party and leanings
summary_table <- data %>%
group_by(political_party, g5sd2_1) %>%
summarise(
trust_rate = mean(g5q1, na.rm = TRUE),
second_opinion_rate = mean(g5q2, na.rm = TRUE),
count = n()
)
print(summary_table)
# Logistic regression to assess predictors
trust_model <- glm(g5q1 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(trust_model)
second_opinion_model <- glm(g5q2 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(second_opinion_model)
# Interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert predictors to factors if they aren't already
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
# Fit the factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
# Summary of the ANOVA
summary(anova_model)
# Interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
#Bar Plot: Trust rate by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Bar Plot: Second opinion rate by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#converting predictors to factors
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
#Factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
#summary of the ANOVA
summary(anova_model)
#interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
# Load necessary libraries
library(dplyr)
library(ggplot2)
data <- read.csv("~/DACSS/Datasets/fa24_g5.csv")
#converting outcome variables to binary (1 for Yes, 0 for No)
data$g5q1 <- ifelse(data$g5q1 == "Yes", 1, 0)
data$g5q2 <- ifelse(data$g5q2 == "Yes", 1, 0)
#political_party to be treated as an ordinal factor
data$political_party <- factor(data$political_party, levels = 1:7,
labels = c("Strong Republican", "Republican", "Lean Republican",
"Independent", "Lean Democrat", "Democrat", "Strong Democrat"))
data <- data[data$education >= 1 & data$education <= 8, ]
#summary: trust rates and second opinion rates by political party and leanings
summary_table <- data %>%
group_by(political_party, g5sd2_1) %>%
summarise(
trust_rate = mean(g5q1, na.rm = TRUE),
second_opinion_rate = mean(g5q2, na.rm = TRUE),
count = n()
)
print(summary_table)
#Logistic regression model
trust_model <- glm(g5q1 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(trust_model)
second_opinion_model <- glm(g5q2 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(second_opinion_model)
# Combined interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
#Bar Plot: Trust rate by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Bar Plot: Second opinion rate by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#converting predictors to factors
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
#Factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
#summary of the ANOVA
summary(anova_model)
#interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
Education_Mod <- lm(g5q1 ~ education, data = data)
summary(Education_Mod)
ggplot(data = HealthcareData, aes(x = g5q1, y = education, group = g5q1, fill = g5q1)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Trust In Healthcare Based On Education Level" , x = "Answer (No/Yes)", y = "Education (Mean)") + theme_minimal()
ggplot(data = ata, aes(x = g5q1, y = education, group = g5q1, fill = g5q1)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Trust In Healthcare Based On Education Level" , x = "Answer (No/Yes)", y = "Education (Mean)") + theme_minimal()
ggplot(data = data, aes(x = g5q1, y = education, group = g5q1, fill = g5q1)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Trust In Healthcare Based On Education Level" , x = "Answer (No/Yes)", y = "Education (Mean)") + theme_minimal()
freq(data$region)
install.packages("frequency")
library(frequency)
freq(data$region)
# 1 Northeast
# 2 Midwest
# 3 South
# 4 West
##Factorial ANOVA model
answer <- aov(groupq ~ IV * region, data = data)
library(frequency)
freq(data$region)
# 1 Northeast
# 2 Midwest
# 3 South
# 4 West
##Factorial ANOVA model
answer <- aov(g5q1 ~ IV * region, data = data)
answer2 <- aov(g5q2 ~ IV * region, data = data)
summary(answer)
summary(answer2)
# Interaction plot to visualize interaction effects
ggplot(data, aes(x = IV, y = groupq, color = region, group = region)) +
geom_line(stat = "summary", fun = "mean") +
labs(title = "Effects of Region",
x = "Gender Information",
y = "Trust (Mean yes/no)") +
theme_minimal()
# Interaction plot to visualize interaction effects
ggplot(data, aes(x = IV, y = g5q1, color = region, group = region)) +
geom_line(stat = "summary", fun = "mean") +
labs(title = "Effects of Region",
x = "Gender Information",
y = "Trust (Mean yes/no)") +
theme_minimal()
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
readRDS("del3Draft.rds")
readRDS("del4Draft.rds")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
readRDS("del3Draft.rds")
readRDS("del4Draft.rds")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
readRDS("del3Draft.rds")
readRDS("del4Draft.rds")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
readRDS("del3Draft.rds")
readRDS("del4Draft.rds")
rm(list = ls()) # clean memory
location='https://github.com/DACSS-Visual/tabular_univar_cat/raw/main/data/'
file='eduwa.rda'
link=paste0(location,file)
#getting the data TABLE from the file in the cloud:
load(file=url(link))
dim(eduwa)
names(eduwa)
str(eduwa,width = 70,strict.width='cut')
library(ggplot2)
# Subset data for Suburb type and drop unused levels
suburbEduwa <- eduwa[eduwa$LocaleType == "Suburb", ]
suburbEduwa$LocaleSub <- droplevels(suburbEduwa$LocaleSub)
# Frequency table as data frame
suburbFreq <- as.data.frame(prop.table(table(suburbEduwa$LocaleSub)))
names(suburbFreq) <- c("LocaleSub", "Percent")
# Horizontal dot plot
ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "blue") +
labs(
title = "Proportion of LocaleSub in Suburb Schools",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
# Horizontal dot plot
ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of LocaleSub in Suburb Schools",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
setwd("~/Documents/GitHub/DACSS690V")
setwd("~/Documents/GitHub/DACSS690V")
# Horizontal dot plot
del1Draft.rds <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of LocaleSub in Suburb Schools",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
View(del1Draft.rds)
library(flexdashboard) # always
readRDS("del1Draft.rds")
# Horizontal dot plot
dotPlot <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of LocaleSub in Suburb Schools",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
#Save dot plot as rds file
saveRDS(dot_plot, file = "suburb_dot_plot.rds")
# Horizontal dot plot
dot_plot <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of LocaleSub in Suburb Schools",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
#Save dot plot as rds file
saveRDS(dot_plot, file = "suburb_dot_plot.rds")
View(dotPlot)
View(dotPlot)
View(dot_plot)
rm(list = ls()) # clean memory
location='https://github.com/DACSS-Visual/tabular_univar_cat/raw/main/data/'
file='eduwa.rda'
link=paste0(location,file)
#getting the data TABLE from the file in the cloud:
load(file=url(link))
dim(eduwa)
names(eduwa)
str(eduwa,width = 70,strict.width='cut')
library(ggplot2)
# Subset data for Suburb type and drop unused levels
suburbEduwa <- eduwa[eduwa$LocaleType == "Suburb", ]
suburbEduwa$LocaleSub <- droplevels(suburbEduwa$LocaleSub)
# Frequency table as data frame
suburbFreq <- as.data.frame(prop.table(table(suburbEduwa$LocaleSub)))
names(suburbFreq) <- c("LocaleSub", "Percent")
# Horizontal dot plot
dot_plot <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of LocaleSub in Suburb Schools",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
#Save dot plot as rds file
saveRDS(dot_plot, file = "suburb_dot_plot.rds")
suburb_dot_plot <- readRDS("~/Documents/GitHub/DACSS690V/suburb_dot_plot.rds")
View(dot_plot)
readRDS("suburb_dot_plot.rds)
readRDS("suburb_dot_plot.rds")
#Let's look at the plot
dot_plot
# Horizontal dot plot
dot_plot <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of Schools in Suburbs Classified by Size of Suburb",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
#Let's look at the plot
dot_plot
# Horizontal dot plot
dot_plot <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of Schools in Suburbs Classified by Size of Suburb",
subtitle = "Detailed breakdown for schools in suburban areas",
caption = "Source: US Department of Education",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
#Let's look at the plot
dot_plot
# Horizontal dot plot
dot_plot <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Proportion of Schools Classified by Suburb Size",
subtitle = "Detailed breakdown for schools in suburban areas",
caption = "Source: US Department of Education",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
#Let's look at the plot
dot_plot
#Save dot plot as rds file
saveRDS(dot_plot, file = "suburb_dot_plot.rds")
# Horizontal dot plot
dot_plot <- ggplot(suburbFreq, aes(x = Percent, y = reorder(LocaleSub, Percent))) +
geom_point(size = 5, color = "orange") +
labs(
title = "Distribution of Schools Classified by Suburb Size",
subtitle = "Detailed breakdown for schools in suburban areas",
caption = "Source: US Department of Education",
x = "Percent",
y = "Locale Subtype"
) +
theme_minimal()
#Let's look at the plot
dot_plot
#Save dot plot as rds file
saveRDS(dot_plot, file = "suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
library(flexdashboard) # always
readRDS("suburb_dot_plot.rds")
