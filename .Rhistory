Gender.Inequality.Index.2022.Value -> Female.Mean.Years.of.Schooling.2022
}"
)
# Plot the DAG using ggdag
ggdag(dag) +
theme_minimal() +
labs(title = "DAG for Socioeconomic Factors and Gender Inequality")
library(dagitty)
library(ggplot2)
library(ggdag)
# Define the DAG structure
dag <- dagitty(
"dag {
Female.Estimated.Gross.National.Income.Per.Capita.2022 [outcome]
Female.Mean.Years.of.Schooling.2022 [exposure]
Education.Disparity.Index -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Labor.Force.Disparity.Index -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Gender.Inequality.Index.2022.Value -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Female.Mean.Years.of.Schooling.2022 -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Education.Disparity.Index -> Female.Mean.Years.of.Schooling.2022
Labor.Force.Disparity.Index -> Female.Mean.Years.of.Schooling.2022
Gender.Inequality.Index.2022.Value -> Female.Mean.Years.of.Schooling.2022
}"
)
# Plot the DAG using ggdag
ggdag(dag) +
theme_minimal() +
labs(title = "DAG for Socioeconomic Factors and Gender Inequality")
# Fit the multiple regression model
model <- lm(Female.Estimated.Gross.National.Income.Per.Capita.2022 ~
Female.Mean.Years.of.Schooling.2022 +
Education.Disparity.Index +
Labor.Force.Disparity.Index +
Gender.Inequality.Index.2022.Value,
data = data)
# Load necessary libraries
library(tidyverse)
data <- read.csv("~/DACSS/Datasets/cleaned_merged_data_with_imputed_values_adjusted.csv")
glimpse(data)
summary(data)
ggplot(data, aes(x = `Female.Mean.Years.of.Schooling.2022`, y = `Female.Estimated.Gross.National.Income.Per.Capita.2022`)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter Plot of Female Income vs. Mean Years of Schooling",
x = "Female Mean Years of Schooling",
y = "Female Estimated Gross National Income Per Capita")
# Proof of concept linear regression model
model <- lm(`Female.Estimated.Gross.National.Income.Per.Capita.2022` ~ `Female.Mean.Years.of.Schooling.2022`, data = data)
summary(model)
# Model diagnostics
par(mfrow = c(2, 2))
plot(model)
library(psych)
summary(data$`Female.Mean.Years.of.Schooling.2022`)
summary(data$`Female.Estimated.Gross.National.Income.Per.Capita.2022`)
describe(data$`Female.Mean.Years.of.Schooling.2022`)
describe(data$`Female.Estimated.Gross.National.Income.Per.Capita.2022`)
library(ggplot2)
#Histogram
ggplot(data, aes(x = `Female.Mean.Years.of.Schooling.2022`)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
labs(title = "Distribution of Female Mean Years of Schooling",
x = "Female Mean Years of Schooling",
y = "Frequency")
#Boxplot
ggplot(data, aes(y = `Female.Estimated.Gross.National.Income.Per.Capita.2022`)) +
geom_boxplot(fill = "yellow", color = "black") +
labs(title = "Box Plot of Female Estimated Gross National Income Per Capita",
y = "Female Estimated Gross National Income Per Capita")
library(dagitty)
library(ggplot2)
library(ggdag)
# Define the DAG structure
dag <- dagitty(
"dag {
Female.Estimated.Gross.National.Income.Per.Capita.2022 [outcome]
Female.Mean.Years.of.Schooling.2022 [exposure]
Education.Disparity.Index -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Labor.Force.Disparity.Index -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Gender.Inequality.Index.2022.Value -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Female.Mean.Years.of.Schooling.2022 -> Female.Estimated.Gross.National.Income.Per.Capita.2022
Education.Disparity.Index -> Female.Mean.Years.of.Schooling.2022
Labor.Force.Disparity.Index -> Female.Mean.Years.of.Schooling.2022
Gender.Inequality.Index.2022.Value -> Female.Mean.Years.of.Schooling.2022
}"
)
# Plot the DAG using ggdag
ggdag(dag) +
theme_minimal() +
labs(title = "DAG for Socioeconomic Factors and Gender Inequality")
# Fit the multiple regression model
model <- lm(Female.Estimated.Gross.National.Income.Per.Capita.2022 ~
Female.Mean.Years.of.Schooling.2022 +
Education.Disparity.Index +
Labor.Force.Disparity.Index +
Gender.Inequality.Index.2022.Value,
data = data)
# Summary of the model
summary(model)
# Diagnostic plots
par(mfrow = c(2, 2))
plot(model)
# Load necessary libraries
library(tidyverse)
data <- read.csv("~/DACSS/Datasets/cleaned_merged_data_with_imputed_values_adjusted.csv")
glimpse(data)
summary(data)
ggplot(data, aes(x = `Female.Mean.Years.of.Schooling.2022`, y = `Female.Estimated.Gross.National.Income.Per.Capita.2022`)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter Plot of Female Income vs. Mean Years of Schooling",
x = "Female Mean Years of Schooling",
y = "Female Estimated Gross National Income Per Capita")
# Proof of concept linear regression model
model <- lm(`Female.Estimated.Gross.National.Income.Per.Capita.2022` ~ `Female.Mean.Years.of.Schooling.2022`, data = data)
summary(model)
# Model diagnostics
par(mfrow = c(2, 2))
plot(model)
library(stargazer)
install.packages("stargazer")
library(stargazer)
stargazer(model, type = "text", title = "Multiple Regression Results")
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
data <- read.csv("~/DACSS/Datasets/fa24_g5.csv")
# Convert outcome variables to binary (1 for Yes, 0 for No)
data$g5q1 <- ifelse(data$g5q1 == "Yes", 1, 0)
data$g5q2 <- ifelse(data$g5q2 == "Yes", 1, 0)
# Ensure political_party is treated as an ordinal factor
data$political_party <- factor(data$political_party, levels = 1:7,
labels = c("Strong Republican", "Republican", "Lean Republican",
"Independent", "Lean Democrat", "Democrat", "Strong Democrat"))
# Summarize data: trust rates and second opinion rates by political party and leanings
summary_table <- data %>%
group_by(political_party, g5sd2_1) %>%
summarise(
trust_rate = mean(g5q1, na.rm = TRUE),
second_opinion_rate = mean(g5q2, na.rm = TRUE),
count = n()
)
print(summary_table)
# Logistic regression to assess predictors
trust_model <- glm(g5q1 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(trust_model)
second_opinion_model <- glm(g5q2 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(second_opinion_model)
# Interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
data <- read.csv("~/DACSS/Datasets/fa24_g5.csv")
# Convert outcome variables to binary (1 for Yes, 0 for No)
data$g5q1 <- ifelse(data$g5q1 == "Yes", 1, 0)
data$g5q2 <- ifelse(data$g5q2 == "Yes", 1, 0)
# Ensure political_party is treated as an ordinal factor
data$political_party <- factor(data$political_party, levels = 1:7,
labels = c("Strong Republican", "Republican", "Lean Republican",
"Independent", "Lean Democrat", "Democrat", "Strong Democrat"))
# Summarize data: trust rates and second opinion rates by political party and leanings
summary_table <- data %>%
group_by(political_party, g5sd2_1) %>%
summarise(
trust_rate = mean(g5q1, na.rm = TRUE),
second_opinion_rate = mean(g5q2, na.rm = TRUE),
count = n()
)
print(summary_table)
# Logistic regression to assess predictors
trust_model <- glm(g5q1 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(trust_model)
second_opinion_model <- glm(g5q2 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(second_opinion_model)
# Interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Scatterplot
ggplot(data, aes(x = political_party, y = as.numeric(g5q1), color = g5sd2_1)) +
geom_jitter(width = 0.2, height = 0.1, alpha = 0.7) +
labs(title = "Scatter Plot of Trust by Political Party and Leanings",
x = "Political Party", y = "Trust (1 = Yes, 0 = No)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Boxplot
ggplot(data, aes(x = g5sd2_1, y = as.numeric(g5q1), fill = g5sd2_1)) +
geom_boxplot() +
labs(title = "Distribution of Trust (g5q1) by Political Leanings",
x = "Political Leanings", y = "Trust (1 = Yes, 0 = No)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#stacked bar plot
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_area(stat = "bin", position = "fill") +
labs(title = "Proportion of Trust in Advice by Political Party",
y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert predictors to factors if they aren't already
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
# Fit the factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
# Summary of the ANOVA
summary(anova_model)
# Interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
data <- read.csv("~/DACSS/Datasets/fa24_g5.csv")
# Convert outcome variables to binary (1 for Yes, 0 for No)
data$g5q1 <- ifelse(data$g5q1 == "Yes", 1, 0)
data$g5q2 <- ifelse(data$g5q2 == "Yes", 1, 0)
# Ensure political_party is treated as an ordinal factor
data$political_party <- factor(data$political_party, levels = 1:7,
labels = c("Strong Republican", "Republican", "Lean Republican",
"Independent", "Lean Democrat", "Democrat", "Strong Democrat"))
# Summarize data: trust rates and second opinion rates by political party and leanings
summary_table <- data %>%
group_by(political_party, g5sd2_1) %>%
summarise(
trust_rate = mean(g5q1, na.rm = TRUE),
second_opinion_rate = mean(g5q2, na.rm = TRUE),
count = n()
)
print(summary_table)
# Logistic regression to assess predictors
trust_model <- glm(g5q1 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(trust_model)
second_opinion_model <- glm(g5q2 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(second_opinion_model)
# Interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
# Visualization: Trust rates by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualization: Second opinion rates by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert predictors to factors if they aren't already
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
# Fit the factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
# Summary of the ANOVA
summary(anova_model)
# Interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
#Bar Plot: Trust rate by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Bar Plot: Second opinion rate by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#converting predictors to factors
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
#Factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
#summary of the ANOVA
summary(anova_model)
#interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
# Load necessary libraries
library(dplyr)
library(ggplot2)
data <- read.csv("~/DACSS/Datasets/fa24_g5.csv")
#converting outcome variables to binary (1 for Yes, 0 for No)
data$g5q1 <- ifelse(data$g5q1 == "Yes", 1, 0)
data$g5q2 <- ifelse(data$g5q2 == "Yes", 1, 0)
#political_party to be treated as an ordinal factor
data$political_party <- factor(data$political_party, levels = 1:7,
labels = c("Strong Republican", "Republican", "Lean Republican",
"Independent", "Lean Democrat", "Democrat", "Strong Democrat"))
data <- data[data$education >= 1 & data$education <= 8, ]
#summary: trust rates and second opinion rates by political party and leanings
summary_table <- data %>%
group_by(political_party, g5sd2_1) %>%
summarise(
trust_rate = mean(g5q1, na.rm = TRUE),
second_opinion_rate = mean(g5q2, na.rm = TRUE),
count = n()
)
print(summary_table)
#Logistic regression model
trust_model <- glm(g5q1 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(trust_model)
second_opinion_model <- glm(g5q2 ~ g5sd2_1 + political_party, family = "binomial", data = data)
summary(second_opinion_model)
# Combined interaction effects between political leanings and party
interaction_model <- glm(g5q1 ~ g5sd2_1 * political_party, family = "binomial", data = data)
summary(interaction_model)
#Bar Plot: Trust rate by political party
ggplot(data, aes(x = political_party, fill = factor(g5q1))) +
geom_bar(position = "fill") +
labs(title = "Trust in Advice by Political Party", y = "Proportion", fill = "Trust (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Bar Plot: Second opinion rate by political leanings
ggplot(data, aes(x = g5sd2_1, fill = factor(g5q2))) +
geom_bar(position = "fill") +
labs(title = "Seeking Second Opinion by Political Leanings", y = "Proportion", fill = "Second Opinion (1 = Yes)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#converting predictors to factors
data$g5sd2_1 <- as.factor(data$g5sd2_1)
data$political_party <- as.factor(data$political_party)
#Factorial ANOVA model
anova_model <- aov(g5q1 ~ g5sd2_1 * political_party, data = data)
#summary of the ANOVA
summary(anova_model)
#interaction plot to visualize interaction effects
interaction.plot(data$g5sd2_1, data$political_party, data$g5q1,
col = rainbow(length(unique(data$political_party))),
legend = TRUE,
xlab = "Political Leanings",
ylab = "Trust in Advice (Mean)",
main = "Interaction Plot: Political Leanings vs Party Affiliation")
Education_Mod <- lm(g5q1 ~ education, data = data)
summary(Education_Mod)
ggplot(data = HealthcareData, aes(x = g5q1, y = education, group = g5q1, fill = g5q1)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Trust In Healthcare Based On Education Level" , x = "Answer (No/Yes)", y = "Education (Mean)") + theme_minimal()
ggplot(data = ata, aes(x = g5q1, y = education, group = g5q1, fill = g5q1)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Trust In Healthcare Based On Education Level" , x = "Answer (No/Yes)", y = "Education (Mean)") + theme_minimal()
ggplot(data = data, aes(x = g5q1, y = education, group = g5q1, fill = g5q1)) + geom_bar(stat = "summary", fun = "mean") + labs(title = "Trust In Healthcare Based On Education Level" , x = "Answer (No/Yes)", y = "Education (Mean)") + theme_minimal()
freq(data$region)
install.packages("frequency")
library(frequency)
freq(data$region)
# 1 Northeast
# 2 Midwest
# 3 South
# 4 West
##Factorial ANOVA model
answer <- aov(groupq ~ IV * region, data = data)
library(frequency)
freq(data$region)
# 1 Northeast
# 2 Midwest
# 3 South
# 4 West
##Factorial ANOVA model
answer <- aov(g5q1 ~ IV * region, data = data)
answer2 <- aov(g5q2 ~ IV * region, data = data)
summary(answer)
summary(answer2)
# Interaction plot to visualize interaction effects
ggplot(data, aes(x = IV, y = groupq, color = region, group = region)) +
geom_line(stat = "summary", fun = "mean") +
labs(title = "Effects of Region",
x = "Gender Information",
y = "Trust (Mean yes/no)") +
theme_minimal()
# Interaction plot to visualize interaction effects
ggplot(data, aes(x = IV, y = g5q1, color = region, group = region)) +
geom_line(stat = "summary", fun = "mean") +
labs(title = "Effects of Region",
x = "Gender Information",
y = "Trust (Mean yes/no)") +
theme_minimal()
install.packages("flexdashboard")
setwd("~/Documents/GitHub/DACSS690V")
# clean memory ------------------------------------------------------------
rm(list = ls())
filename="theFile.csv"
# clean memory ------------------------------------------------------------
rm(list = ls())
mydata=read.csv(filename)
filename="theFile.csv"
mydata=read.csv(filename)
head(mydata)
str(mydata)
# deliverable 1 ----------------------------------------------------------
library(ggplot2)
base= ggplot(data=mydata)
del1Draft= base + geom_bar(aes(x=LocaleType))
del1Draft
View(del1Draft)
View(mydata)
# save del1Draft ----------------------------------------------------------
saveRDS(del1Draft, file = "del1Draft.rds")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
del2Draft= base + geom_histogram(aes(x=Student.Teacher.Ratio))
del2Draft
# save del2Draft ----------------------------------------------------------
saveRDS(del2Draft, file = "del2Draft.rds")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
readRDS("del3Draft.rds")
del3Draft= base + geom_point(aes(x=Student.Teacher.Ratio,
y=Free.Lunch))
del3Draft
# save del3Draft ----------------------------------------------------------
saveRDS(del3Draft, file = "del3Draft.rds")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
readRDS("del3Draft.rds")
readRDS("del4Draft.rds")
county_map=sf::read_sf("WA_County_Boundaries.geojson")
head(county_map)
head(mydata)
# merge data into map ----------------------------------------------------------
mydataCounty=aggregate(data=mydata,Free.Lunch~County,FUN = mean)
myMapLunch=merge(county_map,mydataCounty,by.x='JURISDIC_2',"County")
base=ggplot(myMapLunch)
del4Draft=base + geom_sf(aes(fill=Free.Lunch))
del4Draft
# save del4Draft ----------------------------------------------------------
saveRDS(del4Draft, file = "del4Draft.rds")
library(flexdashboard) # always
readRDS("del1Draft.rds")
readRDS("del2Draft.rds")
readRDS("del3Draft.rds")
readRDS("del4Draft.rds")
